AWSTemplateFormatVersion: 2010-09-09
Description: >-
  entr-lambda
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment to apply template too. Also dictates which env variables to use.

Mappings:
  EnvironmentVariables:
    dev:
      #Place dev env variables and arns here
#TODO: redefine these once db exists again.
#      DbSecretArn: arn:aws:secretsmanager:us-east-2:050478186931:secret:rds!cluster-e9dc8dfe-3415-4aee-9de5-0f02f02ca0e5-lXwO8B
#      ClusterArn: arn:aws:rds:us-east-2:050478186931:cluster:entr-cluster-1
    test:
      #Place test env variable and arns here
    prod:
      #Place prod env variables and arns here


Globals:
  Function:
    Runtime: node22.x
    Layers:
      - !Ref EntrModulesLayer # giving our lambdas access to our db layer
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 100
    LoggingConfig:
      LogFormat: JSON

Resources:

  # User pool to store all users and manage authorization
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AWS::StackName}-users'
      AutoVerifiedAttributes: [ phone_number ] # send text confirmation before user is added to the pool
      Schema:
        - Name: email
        - Required: true
        - Mutable: true
        - Name: phone_number
        - Required: true
        - Mutable: true
        - Name: given_name
        - Required: true
        - Mutable: true
        - Name: family_name
        - Required: true
        - Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: web
      GenerateSecret: false

  UserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: user
      UserPoolId: !Ref UserPool
      Description: Default application users

  BarAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: bar-admin
      UserPoolId: !Ref UserPool
      Description: Bar administrators

  # API Gateway HTTP API with JWT Authorizer
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins: [ '*' ]
        AllowMethods: [ 'GET','POST','PATCH','DELETE','OPTIONS' ]
        AllowHeaders: [ 'Authorization','Content-Type' ]
      Auth:
        Authorizers:
          CognitoJwt:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              # Issuer must be the Cognito user pool issuer URL
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"
              audience:
                - !Ref UserPoolClient
  # Roles
  LambdaDataApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "lambda-dataapi-role-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      # standard privileges (cloud watch allow)
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        # Access our db cluster ONLY via data api
        - PolicyName: DataApiPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-data:ExecuteStatement
                  - rds-data:BatchExecuteStatement
                  - rds-data:BeginTransaction
                  - rds-data:CommitTransaction
                  - rds-data:RollbackTransaction
#                Resource: !Ref ClusterArn
        # Allow reading your DB secret
        - PolicyName: SecretReadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ReadSecret
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue


#TODO: Once db is added back, redeclare this.
#                Resource: !Ref DbSecretArn

  EntrModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers
      Description: layer functions for interacting with database
      LayerName: Entr_Modules
      RetentionPolicy: Delete # Deleting previous layer versions. May change later if we find a reason to keep them.
    Metadata:
      BuildMethod: node22.x
        # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # Function to call as a bar admin to submit an email and make that person a bar admin for that bar.
  AddBarAdmin:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/barAdmins/
      Handler: addBarAdminByEmail.addBarAdminByEmailHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpAddBarAdmin:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /bar-admins/add
            Method: POST
            Auth:
              Authorizer: CognitoJwt

    # ============================== USERS ==============================
  GetUsers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/users/
      Handler: getUsers.getUsersHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpGetUsers:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users
            Method: GET
            # public: design your filtering via query string

  CreateUsers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/users/
      Handler: createUsers.createUsersHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpCreateUsers:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users
            Method: POST
            # public signup (make protected if you prefer)

  UpdateUsers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/users/
      Handler: updateUsers.updateUsersHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpUpdateUsers:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users
            Method: PATCH
            Auth:
              Authorizer: CognitoJwt

  DeleteUsers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/users/
      Handler: deleteUsers.deleteUsersHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpDeleteUsers:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users
            Method: DELETE
            Auth:
              Authorizer: CognitoJwt

  # =========================== BAR ADMINS ============================
  GetBarAdmins:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/barAdmins/
      Handler: getBarAdmins.getBarAdminsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpGetBarAdmins:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /bar-admins
            Method: GET
            Auth:
              Authorizer: CognitoJwt

  CreateBarAdmins:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/barAdmins/
      Handler: createBarAdmins.createBarAdminsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpCreateBarAdmins:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /bar-admins
            Method: POST
            Auth:
              Authorizer: CognitoJwt

  UpdateBarAdmins:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/barAdmins/
      Handler: updateBarAdmins.updateBarAdminsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpUpdateBarAdmins:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /bar-admins
            Method: PATCH
            Auth:
              Authorizer: CognitoJwt

  DeleteBarAdmins:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/barAdmins/
      Handler: deleteBarAdmins.deleteBarAdminsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpDeleteBarAdmins:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /bar-admins
            Method: DELETE
            Auth:
              Authorizer: CognitoJwt

  # ============================== BARS ===============================
  GetBars:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/bars/
      Handler: getBars.getBarsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpGetBars:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /bars
            Method: GET
            # public

  CreateBars:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/bars/
      Handler: createBars.createBarsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpCreateBars:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /bars
            Method: POST
            Auth:
              Authorizer: CognitoJwt

  UpdateBars:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/bars/
      Handler: updateBars.updateBarsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpUpdateBars:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /bars
            Method: PATCH
            Auth:
              Authorizer: CognitoJwt

  DeleteBars:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/bars/
      Handler: deleteBars.deleteBarsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpDeleteBars:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /bars
            Method: DELETE
            Auth:
              Authorizer: CognitoJwt

  # ============================= LEVELS =============================
  GetLevels:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/levels/
      Handler: getLevels.getLevelsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpGetLevels:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /levels
            Method: GET
            # public

  CreateLevels:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/levels/
      Handler: createLevels.createLevelsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpCreateLevels:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /levels
            Method: POST
            Auth:
              Authorizer: CognitoJwt

  UpdateLevels:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/levels/
      Handler: updateLevels.updateLevelsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpUpdateLevels:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /levels
            Method: PATCH
            Auth:
              Authorizer: CognitoJwt

  DeleteLevels:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/levels/
      Handler: deleteLevels.deleteLevelsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpDeleteLevels:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /levels
            Method: DELETE
            Auth:
              Authorizer: CognitoJwt

  # ============================ SECTIONS ============================
  GetSections:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/sections/
      Handler: getSections.getSectionsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpGetSections:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sections
            Method: GET
            # public

  CreateSections:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/sections/
      Handler: createSections.createSectionsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpCreateSections:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sections
            Method: POST
            Auth:
              Authorizer: CognitoJwt

  UpdateSections:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/sections/
      Handler: updateSections.updateSectionsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpUpdateSections:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sections
            Method: PATCH
            Auth:
              Authorizer: CognitoJwt

  DeleteSections:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/sections/
      Handler: deleteSections.deleteSectionsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpDeleteSections:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sections
            Method: DELETE
            Auth:
              Authorizer: CognitoJwt

  # =========================== RESERVATIONS =========================
  GetReservations:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/reservations/
      Handler: getReservations.getReservationsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpGetReservations:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /reservations
            Method: GET
            # public or protect if you only want "my reservations"

  CreateReservations:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/reservations/
      Handler: createReservations.createReservationsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpCreateReservations:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /reservations
            Method: POST
            # public checkout, or protect as needed

  UpdateReservations:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/reservations/
      Handler: updateReservations.updateReservationsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpUpdateReservations:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /reservations
            Method: PATCH
            Auth:
              Authorizer: CognitoJwt

  DeleteReservations:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/reservations/
      Handler: deleteReservations.deleteReservationsHandler
      Role: !Ref LambdaRoleArn
      Events:
        HttpDeleteReservations:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /reservations
            Method: DELETE
            Auth:
              Authorizer: CognitoJwt
Outputs:
  ApiEndpoint:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
    Description: Invoke URL for the $default stage
  CognitoUserPoolId:
    Value: !Ref UserPool
  CognitoAppClientId:
    Value: !Ref UserPoolClient

